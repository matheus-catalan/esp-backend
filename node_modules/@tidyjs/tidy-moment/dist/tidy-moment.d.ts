import { Moment } from 'moment';
import { A } from 'ts-toolbelt';
import { Granularity, SummarizeSpec, TidyFn, SummarizeOptions } from '@tidyjs/tidy';

declare type GranularityWithQuarter = Granularity | 'q' | 'quarter' | 'quarters';

interface SummarizeMGOptions<T> extends SummarizeOptions<T> {
    timestampKey?: string;
    dateKey?: string;
}
declare type SMGOutput<T extends object, SumSpec extends SummarizeSpec<T>, Options extends SummarizeMGOptions<T>> = {
    [K in keyof SumSpec]: ReturnType<SumSpec[K]>;
} & Exclude<T, keyof SumSpec> & (Options['timestampKey'] extends string ? {
    [K in Options['timestampKey']]: string;
} : {
    timestamp: string;
}) & (Options['dateKey'] extends string ? {
    [K in Options['dateKey']]: Moment;
} : {
    date: Moment;
});
declare function summarizeMomentGranularity<T extends object, SummarizedSpec extends SummarizeSpec<T> = SummarizeSpec<T>, Options extends SummarizeMGOptions<T> = SummarizeMGOptions<T>>(granularity: GranularityWithQuarter, summarySpec: SummarizedSpec, options?: Options): TidyFn<T, A.Compute<SMGOutput<T, SummarizedSpec, Options>, 'flat'>>;

export { summarizeMomentGranularity };
