{"version":3,"file":"tidy-moment.min.js","sources":["../../src/summarizeMomentGranularity.ts"],"sourcesContent":["import moment, { Moment } from 'moment';\nimport { A } from 'ts-toolbelt';\nimport {\n  tidy,\n  first,\n  groupBy,\n  mutate,\n  summarize,\n  TidyFn,\n  SummarizeSpec,\n  SummarizeOptions,\n} from '@tidyjs/tidy';\nimport { GranularityWithQuarter } from './types';\n\ninterface SummarizeMGOptions<T> extends SummarizeOptions<T> {\n  timestampKey?: string;\n  dateKey?: string;\n}\n\ntype SMGOutput<\n  T extends object,\n  SumSpec extends SummarizeSpec<T>,\n  Options extends SummarizeMGOptions<T>\n> = {\n  // summarized values map to return type of the spec functions\n  [K in keyof SumSpec]: ReturnType<SumSpec[K]>;\n} &\n  Exclude<T, keyof SumSpec> &\n  (Options['timestampKey'] extends string\n    ? { [K in Options['timestampKey']]: string }\n    : { timestamp: string }) &\n  (Options['dateKey'] extends string\n    ? { [K in Options['dateKey']]: Moment }\n    : { date: Moment });\n\nexport function summarizeMomentGranularity<\n  T extends object,\n  SummarizedSpec extends SummarizeSpec<T> = SummarizeSpec<T>,\n  Options extends SummarizeMGOptions<T> = SummarizeMGOptions<T>\n>(\n  granularity: GranularityWithQuarter,\n  summarySpec: SummarizedSpec,\n  options?: Options\n): TidyFn<T, A.Compute<SMGOutput<T, SummarizedSpec, Options>, 'flat'>> {\n  type Output = SMGOutput<T, SummarizedSpec, Options>;\n\n  const _summarizeMomentGranularity: TidyFn<T, A.Compute<Output, 'flat'>> = (\n    items: T[]\n  ): A.Compute<Output, 'flat'>[] => {\n    options = options ?? ({} as Options);\n    const {\n      timestampKey = 'timestamp',\n      dateKey = 'date',\n      rest = first,\n      ...other\n    } = options;\n\n    const dateFormats = {\n      s: 'YYYY-MM-DDTHH:mm:ss',\n      seconds: 'YYYY-MM-DDTHH:mm:ss',\n      second: 'YYYY-MM-DDTHH:mm:ss',\n      min: 'YYYY-MM-DDTHH:mm',\n      minutes: 'YYYY-MMDDTHH:mm',\n      minute: 'YYYY-MM-DDTHH:mm',\n      d: 'YYYY-MM-DD',\n      days: 'YYYY-MM-DD',\n      day: 'YYYY-MM-DD',\n      w: 'GGGG-WW', // need Week Year otherwise 2019-12-31 is year 2019, week 1\n      week: 'GGGG-WW', // need Week Year otherwise 2019-12-31 is year 2019, week 1\n      weeks: 'GGGG-WW', // need Week Year otherwise 2019-12-31 is year 2019, week 1\n      m: 'YYYY-MM',\n      month: 'YYYY-MM',\n      months: 'YYYY-MM',\n      q: 'YYYY-[Q]Q',\n      quarter: 'YYYY-[Q]Q',\n      quarters: 'YYYY-[Q]Q',\n      y: 'YYYY',\n      year: 'YYYY',\n      years: 'YYYY',\n    };\n    const dateFormat = dateFormats[granularity];\n\n    const results = tidy(\n      items,\n      mutate({\n        [dateKey]: (d) =>\n          moment.utc(\n            ((d as any)[dateKey] as Moment).format(dateFormat),\n            dateFormat\n          ),\n        [timestampKey]: (d) => ((d as any)[dateKey] as Moment).toISOString(),\n      }),\n      groupBy(\n        [timestampKey as any],\n        [\n          summarize<T, SummarizedSpec, Pick<Options, keyof SummarizeOptions>>(\n            summarySpec,\n            { rest, ...other }\n          ) as any,\n        ]\n      )\n    );\n\n    return (results as unknown) as A.Compute<Output, 'flat'>[];\n  };\n\n  return _summarizeMomentGranularity;\n}\n"],"names":["first","tidy","mutate","moment","groupBy","summarize"],"mappings":";;;;;;;;;;sCAwCE,aACA,aACA;EAIA,QAAM,8BAAoE,CACxE;EAEA,cAAU,4BAAY;EACtB,UAAM;EAAA,MACJ,eAAe;EAAA,MACf,UAAU;EAAA,MACV,OAAOA;EAAA,SACJ;EAAA,QACD;EAEJ,UAAM,cAAc;EAAA,MAClB,GAAG;EAAA,MACH,SAAS;EAAA,MACT,QAAQ;EAAA,MACR,KAAK;EAAA,MACL,SAAS;EAAA,MACT,QAAQ;EAAA,MACR,GAAG;EAAA,MACH,MAAM;EAAA,MACN,KAAK;EAAA,MACL,GAAG;EAAA,MACH,MAAM;EAAA,MACN,OAAO;EAAA,MACP,GAAG;EAAA,MACH,OAAO;EAAA,MACP,QAAQ;EAAA,MACR,GAAG;EAAA,MACH,SAAS;EAAA,MACT,UAAU;EAAA,MACV,GAAG;EAAA,MACH,MAAM;EAAA,MACN,OAAO;EAAA;EAET,UAAM,aAAa,YAAY;EAE/B,UAAM,UAAUC,UACd,OACAC,YAAO;EAAA,OACJ,UAAU,CAAC,MACVC,2BAAO,IACH,EAAU,SAAoB,OAAO,aACvC;EAAA,OAEH,eAAe,CAAC,MAAQ,EAAU,SAAoB;EAAA,QAEzDC,aACE,CAAC,eACD;EAAA,MACEC,eACE,aACA,CAAE,SAAS;EAAA;EAMnB,WAAQ;EAAA;EAGV,SAAO;EAAA;;;;;;;;;;"}